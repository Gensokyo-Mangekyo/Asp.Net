//Перед работой с REST API скачай программу POSTMAN чтобы осуществлять http запросы 

//Сначала создаём repository его интрефейс и класс


using System.Collections.Generic;

public interface IRepository
{
   List<int> rep { get; set; }
}


using System.Collections.Generic;

public class Repository : IRepository
{
    public List<int> rep { get; set; }

    public Repository()
    {
        rep = new List<int>();
        rep.Add(15);
        rep.Add(5);
        rep.Add(3);
        rep.Add(1);
    }
}

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace Asp.Net
{
    public class Startup
    {
       
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc();
            services.AddSingleton<IRepository, Repository>(); //Нужен для хранения данных он создаётся только один раз!
        }


        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
         
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseEndpoints(end => end.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}"));

        }
    }
}




using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Asp.Net.Controllers
{
    public class HomeController : Controller
    {

        
        [HttpGet]
        public JsonResult Index([FromServices] IRepository repository)
        {
            return new JsonResult(repository.rep);
        }

        

        [HttpPost]
        [Route("add")]
        public JsonResult AddNumberList([FromServices] IRepository repository, int num)
        {
            repository.rep.Add(num);
            return new JsonResult(repository.rep);
        }

        [HttpPut]
        [Route("update")]
        public JsonResult UpdateNumberList([FromServices] IRepository repository, int oldnum,int newnum)
        {
            if (repository.rep.Contains(oldnum))
            {
                repository.rep[repository.rep.IndexOf(oldnum)] = newnum;
                return new JsonResult(repository.rep);
            }
            throw new System.ArgumentException();
        }

        [HttpDelete]
        [Route("delete")]
        public JsonResult DeleteNumberList([FromServices] IRepository repository, int num)
        {
            if (repository.rep.Remove(num))
            {
                return new JsonResult(repository.rep);
            }
            throw new System.ArgumentException();
        }
        [Route("async")]
        public async Task<ActionResult> Index() //Асинхронные операции в контроллере 
        {
            //Асинхронные методы позволяют оптимизировать производительность приложения
            //Могут занять довольно продолжительное время, например, обращение к базе данных
            //Применение асинхронных методов позволяет приложению параллельно с выполнением асинхронного кода выполнять также другие запросы.
            var lst = new List<int>() { 1, 2, 3, 4 };
            await Task.Run(() => lst.ToArray()); //Если есть await то это всегда будет возрат Task если есть рядом Async с названием то он точно возращает Task
            //В первую очередь их предпочтительно использовать при запросах к БД, к внешнем сетевым ресурсам 
            return View();
        }

    }
}

//Index.cshtml

@{
    Layout = null;
}
<!doctype html>
<html>
<head>
    <title>Gensokyo</title>
    <meta charset="utf-8" />
</head>
<body>
   <h1>Выполненна асинхронная операция</h1>
</body>
</html>

//Теперь заходим в Postman и выполняем четыре запроса get post put delete
https://localhost:port это get
https://localhost:port/add?num=666 это post
https://localhost:port/update?oldnum=3&newnum=15 это put
https://localhost:port/delete?num=5 это delete
//Контроллер может получать сервисы приложения через механизм dependency injection. Это можно сделать тремя способами
//Обрати внимание на класс Startup так как там есть настройка сервисов и UseStatusCodePagesWithReExecute который делает перенаправление

using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace Asp.Net
{
    public class Startup
    {
       
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc(); //Добавялем сервесы mvc
            services.AddTransient<ITime, SimpleTime>(); //Подробнее о DI не будем просто знай что есть
            //AddSingleton->  создаётся один раз (SimpleTime объект) при запуске приложения, и при всех запросах к приложению оно использует один и тот же singleton-объект
            //AddTransient  создаются каждый раз при вызове
            //AddScoped создаётся только один на каждый запрос 
        }


        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseStatusCodePagesWithReExecute("/errorcode", "?code={0}"); //Перенаправление статус кода протокола http ошибки на маршрут
            //errorcode это первый параметр а второй передаёт параметр контроллеру {0} это код ошибки http протокола
            env.EnvironmentName = "Gensokyo"; //Теперь вместо генерации исключения и показ ошибки в браузере будет генерироватся http статус 500
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseEndpoints(end => end.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}"));

        }
    }
}


using Microsoft.AspNetCore.Mvc;


namespace Asp.Net.Controllers
{
    public class HomeController : Controller
    {

        private readonly ITime timeService; 
        //Передача DI через конструктор
        public HomeController(ITime timeServ)
        {
            timeService = timeServ;
        }

        public IActionResult Index() //Можно через параметр
        {
            return View();
        }
        [Route("Sakuya")]
        public string GetTime([FromServices] ITime time) //Так тоже можно через параметр
        {
            //Есть ещё способ вот такой HttpContext.RequestServices.GetService<ITime>();
            return $"Sakuya time = {time.Time}";
        }

        [Route("errorcode")]
        public IActionResult ErrorCode(string code)
        {
           return View("Error", code);
        }


        [HttpPost]
        public string Index(string[] lang)
        {
            string result = "";
            foreach (var item in lang)
            {
                result = $"{result} {item}";
            }
            return result;
        }
    }
}

//Index.cshtml

@{
    Layout = null;
}
<!doctype html>
<html>
<head>
    <title>Gensokyo</title>
    <meta charset="utf-8" />
</head>
<body>
    <a href ="/Sakuya">Чекнуть время</a>
    <form  method="post">
        <select multiple name="lang">
            <option>C#</option>
            <option>Java</option>
            <option>C++</option>
        </select>
         <input type="submit"/>  
    </form>
</body>
</html>

//Error.cshtml

@model string
<!doctype html>
<html>
<head>
    <title>Gensokyo</title>
    <meta charset="utf-8" />
</head>
<body>
    <h1>Упс что-то пошло не так код ошибки @Model</h1>
</body>
</html>

//Попробуй выбрать несколько элементов в списке и нажать на кнопку. Выдадит строку списка выбранных элементов <select multiple> позволяет делать такое
//Теперь введи не существующий url и увидишь страницу Error.cshtml и код ошибки 404
